basePath: /
definitions:
  dto.BookingWithUserResponse:
    properties:
      booking_number:
        type: string
      id:
        type: integer
      status:
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      role:
        type: string
      username:
        type: string
    type: object
  modal.Booking:
    properties:
      bookingNumber:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      status:
        $ref: '#/definitions/modal.Status'
      updatedAt:
        type: string
      userID:
        type: integer
      valid:
        type: boolean
    type: object
  modal.Role:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - AdminRole
    - UserRole
  modal.Status:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - Pending
    - Confirmed
    - Cancelled
  modal.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      role:
        $ref: '#/definitions/modal.Role'
      updatedAt:
        type: string
      username:
        type: string
      valid:
        type: boolean
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server celler server.
  title: Golang Testing POC API
  version: "1.0"
paths:
  /booking:
    post:
      consumes:
      - application/json
      description: Create a new booking with the input payload
      parameters:
      - description: Booking object that needs to be created
        in: body
        name: booking
        required: true
        schema:
          $ref: '#/definitions/modal.Booking'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/modal.Booking'
      summary: Create a new booking
      tags:
      - Bookings
  /booking/user:
    get:
      description: Get a list of bookings with user list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.BookingWithUserResponse'
            type: array
      summary: Get booking list with user list
      tags:
      - Bookings
  /user:
    get:
      description: Get a list of users
      parameters:
      - description: Role ID
        in: query
        name: role
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/modal.User'
            type: array
      summary: Get user list
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user with the input payload
      parameters:
      - description: User object that needs to be created
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/modal.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/modal.User'
      summary: Create a new user
      tags:
      - Users
  /user/{id}:
    get:
      description: Get a single user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modal.User'
      summary: Get user by ID
      tags:
      - Users
swagger: "2.0"
